{"version":3,"sources":["utils/getQuestion.js","config/request.js","screens/App/index.js","serviceWorker.js","index.js"],"names":["getQuestion","alreadyFeatures","params","answers","Promise","next","reject","a","body","length","JSON","stringify","fetch","method","headers","call","json","res","console","log","SearchContainer","question","answersButtons","onButtonClick","className","src","alt","map","answer","key","Math","random","onClick","value","title","FinishedContainer","characterMatch","image","name","App","state","loading","finished","setQuestion","setState","feature","param","alert","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f36aa783.chunk.js","sourcesContent":["\r\nimport url from '../config/request';\r\n\r\nexport default function getQuestion(alreadyFeatures, params, answers) {\r\n  return new Promise(async (next, reject) => {\r\n    let body\r\n\r\n    if(alreadyFeatures.length)\r\n      body = JSON.stringify({ alreadyFeatures, params, answers });\r\n    else\r\n      body = JSON.stringify({});\r\n\r\n    try {\r\n      const call = await fetch(`${url}/api/questions/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        body\r\n      });\r\n\r\n      const res = await call.json();\r\n\r\n      next(res);\r\n    } catch(error) {\r\n      console.log(error);\r\n      reject('Error on get Question');\r\n    }\r\n  });\r\n}","const url = '';\r\nexport default url;","import React, { Component } from 'react';\n\nimport getQuestion from '../../utils/getQuestion';\n\nimport './styles.css';\n\nconst numberOfQuestions = 15;\n\nconst SearchContainer = ({ question, answersButtons, onButtonClick }) => (\n  <div className=\"searchContainer\">\n    <img src=\"/brain.png\" alt=\"\" />\n    <h2>{ question }</h2>\n    <div>\n      { answersButtons.map(answer => <button key={Math.random()} onClick={() => onButtonClick(answer.value)}>{ answer.title }</button>) }\n    </div>\n  </div>\n);\n\nconst FinishedContainer = ({ characterMatch }) => (\n  <div className=\"finishedContainer\">\n    <img src={characterMatch.image} alt=\"\" />\n    <h2>{ characterMatch.name }</h2>\n  </div>\n);\n\nclass App extends Component {\n  state = {\n    alreadyFeatures: [],\n    params: [],\n    answers: [],\n    answersButtons: [],\n    question: '',\n    characterMatch: null,\n    loading: true,\n    finished: false\n  };\n\n  componentWillMount() {\n    this.setQuestion();\n  }\n\n  setQuestion = async () => {\n    this.setState({ loading: true });\n\n    try {\n      const { alreadyFeatures, params } = this.state;\n      const { answers, characterMatch, feature, param, question } = await getQuestion(alreadyFeatures, params, this.state.answers);\n      this.setState({ params: [...this.state.params, param], alreadyFeatures: [...this.state.alreadyFeatures, feature], answersButtons: answers, characterMatch, question, loading: false, finished: this.state.finished || !question });\n    } catch(error) {\n      console.log(error);\n      this.setState({ loading: false });\n      alert('Error on get Question');\n    }\n  }\n\n  onButtonClick = async answer => {\n    await this.setState({ answers: [...this.state.answers, answer] });\n    await this.setQuestion();\n\n    const finished = this.state.answers.length === numberOfQuestions;\n\n    if(finished)\n      this.setState({ finished: true });\n  }\n\n  render() {\n    const { question, answersButtons, loading, finished, characterMatch } = this.state;\n\n    return (\n      <div className=\"app\">\n        <header>\n          <h1>I WILL DISCOVER YOUR SUPERHERO!</h1>\n        </header>\n        <main>\n          { loading && !finished ? <h2>Carregando..</h2> : null }\n          { !loading && !finished ? <SearchContainer question={question} answersButtons={answersButtons} onButtonClick={this.onButtonClick} /> : null }\n          { finished ? <FinishedContainer characterMatch={characterMatch} /> : null }\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './screens/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}